/*
 * Copyright (c) 2021, Jeff McBride
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "uart_{{ id }}.hpp"

#include <modm/architecture/driver/atomic/queue.hpp>

namespace
{
	static modm::atomic::Queue<uint8_t, {{ options["buffer.rx"] }}> rxBuffer;
	static modm::atomic::Queue<uint8_t, {{ options["buffer.tx"] }}> txBuffer;
}

MODM_ISR(FLEXCOM{{ id }})
{
	using namespace modm::platform;
	if(Uart{{ id }}::isReceiveReady()) {
		uint8_t data = (uint8_t)USART{{ id }}->US_RHR;
		Uart{{ id }}::read(data);
		rxBuffer.push(data);
	}

	if(Uart{{ id }}::isTransmitReady()) {
		if(txBuffer.isEmpty()) {
			USART{{ id }}->US_IDR = US_IDR_TXRDY;
		} else {
			USART{{ id }}->US_THR = txBuffer.get();
			txBuffer.pop();
		}
	}
}

namespace modm::platform
{

bool
Uart{{ id }}::read(uint8_t &dataOut) {
	if(rxBuffer.isEmpty()) {
		return false;
	} else {
		dataOut = rxBuffer.get();
		rxBuffer.pop();
		return true;
	}
}

std::size_t
Uart{{ id }}::read(uint8_t *data, std::size_t length) {
	uint32_t i = 0;
	for(; i < length; i++) {
		if(rxBuffer.isEmpty()) {
			return i;
		} else {
			data[i] = rxBuffer.get();
			rxBuffer.pop();
		}
	}
	return i;
}

bool
Uart{{ id }}::write(uint8_t data)
{
	if(txBuffer.isEmpty() && isTransmitReady()) {
		USART{{ id }}->US_THR = data;
	} else {
		if(!txBuffer.push(data)) {
			return false;
		}
		// Enable tx interrupt
		USART{{ id }}->US_IER = US_IER_TXRDY;
	}
	return true;
}

std::size_t
Uart{{ id }}::write(const uint8_t *data, std::size_t length)
{
	uint32_t i = 0;
	for(; i < length; i++) {
		if(!write(data[i])) {
			return i;
		}
	}
	return i;
}

bool
Uart{{ id }}::isWriteFinished()
{
	return txBuffer.isEmpty() && isTransmitReady();
}

void
Uart{{ id }}::flushWriteBuffer()
{
	while(!isWriteFinished());
}

void
Uart{{ id }}::setParity(Parity parity)
{
	USART{{ id }}->US_MR = (USART{{ id }}->US_MR & ~US_MR_PAR_Msk) | (uint32_t)parity;
}

void
Uart{{ id }}::setWordLength(WordLength length)
{
	if(length == WordLength::Bit9) {
		USART{{ id }}->US_MR |= US_MR_MODE9;
	} else {
		USART{{ id }}->US_MR &= ~US_MR_MODE9;
		USART{{ id }}->US_MR =
			(USART{{ id }}->US_MR & ~US_MR_CHRL_Msk)
				| US_MR_CHRL((uint32_t)length);
	}
}

} // namespace modm::platform