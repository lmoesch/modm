#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2019-2021 Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

import math

def init(module):
    module.name = ":platform:core"
    module.description = """\
# STM32 core module

Provides STM32 specific linkerscripts and startup code.
"""

def prepare(module, options):
    if options[":target"].identifier.platform != "stm32":
        return False

    module.depends(":platform:cortex-m")
    return True


def build(env):
    target = env[":target"].identifier
    env.substitutions = {"target": target}
    env.outbasepath = "modm/src/modm/platform/core"
    # startup helper code
    env.template("startup_platform.c.in")

    # delay code that must be tuned for each family
    # (cycles per loop, setup cost in loops, max us shift)
    tuning = {
        "g4": (3,  4, 5), # CM4  tested on G476 in RAM
        "l0": (3,  4, 6), # CM0+ tested on L031 in RAM
        "g0": (3,  4, 5), # CM0+ tested on G072 in RAM
        "f7": (1, 16, 4), # CM7  tested on F767 in ITCM
        "l4": (3,  4, 5), # CM4  tested on L476 in SRAM2
        "f3": (3,  4, 5), # CM4  tested on F334, F303 in CCM RAM

        # Defaults of (4, 4) for these families:
        "l1": (4,  4, 6), # CM3  tested on L152 in RAM
        "f0": (4,  4, 6), # CM3  tested on F071 in RAM
        "f1": (4,  4, 5), # CM3  tested on F103 in RAM
        "f4": (4,  4, 4), # CM4  tested on F401, F411, F446 in RAM
        "f2": (4,  4, 4), # CM3  guessed based on documentation
    }[target.family]

    env.substitutions.update({
        "with_cm0": env[":target"].has_driver("core:cortex-m0*"),
        "loop": tuning[0],
        "shift": int(math.log2(tuning[1])),
        "us_shift": tuning[2],
        "with_assert": env.has_module(":architecture:assert")
    })
    env.template("../cortex/delay_ns.cpp.in", "delay_ns.cpp")
    env.template("../cortex/delay_ns.hpp.in", "delay_ns.hpp")
    env.template("../cortex/delay_impl.hpp.in", "delay_impl.hpp")


def post_build(env):
    properties = env.query("::cortex-m:linkerscript")
    target = env[":target"].identifier
    properties["with_crashcatcher"] = env.has_module(":crashcatcher")

    if "backup" in properties["regions"]:
        properties["regions"].remove("backup")

    linkerscript = "ram"
    for memory in properties["memories"]:
        if memory["name"] == "ccm":
            if "x" in memory["access"]:
                # Executable CCM (Instruction Core-Coupled Memory)
                linkerscript = "iccm"
            else:
                # Non-executable CCM (Data Core-Coupled Memory)
                linkerscript = "dccm"
        elif memory["name"] == "dtcm":
            # Executable ITCM and DTCM (Tightly-Coupled Memory)
            linkerscript = "idtcm"

    # Add the RAM section for a poor-mans flood filling of all SRAMs
    ram_origin = min(m["start"] for m in properties["memories"] if "sram" in m["name"]),
    ram_size, = sum(m["size"] for m in properties["memories"] if "sram" in m["name"]),
    properties["memories"].append({
        "name": "ram",
        "start": ram_origin,
        "size": ram_size,
        "access": "rwx",
    })

    env.substitutions = properties
    env.outbasepath = "modm/link"
    env.template("linkerscript/stm32_{}.ld.in".format(linkerscript), "linkerscript.ld")
